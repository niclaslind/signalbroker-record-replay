// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `diagnostics_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct DiagnosticsRequest {
    // message fields
    pub upLink: ::protobuf::SingularPtrField<super::common::SignalId>,
    pub downLink: ::protobuf::SingularPtrField<super::common::SignalId>,
    pub serviceId: ::std::vec::Vec<u8>,
    pub dataIdentifier: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiagnosticsRequest {
    fn default() -> &'a DiagnosticsRequest {
        <DiagnosticsRequest as ::protobuf::Message>::default_instance()
    }
}

impl DiagnosticsRequest {
    pub fn new() -> DiagnosticsRequest {
        ::std::default::Default::default()
    }

    // .base.SignalId upLink = 1;


    pub fn get_upLink(&self) -> &super::common::SignalId {
        self.upLink.as_ref().unwrap_or_else(|| <super::common::SignalId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upLink(&mut self) {
        self.upLink.clear();
    }

    pub fn has_upLink(&self) -> bool {
        self.upLink.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upLink(&mut self, v: super::common::SignalId) {
        self.upLink = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upLink(&mut self) -> &mut super::common::SignalId {
        if self.upLink.is_none() {
            self.upLink.set_default();
        }
        self.upLink.as_mut().unwrap()
    }

    // Take field
    pub fn take_upLink(&mut self) -> super::common::SignalId {
        self.upLink.take().unwrap_or_else(|| super::common::SignalId::new())
    }

    // .base.SignalId downLink = 2;


    pub fn get_downLink(&self) -> &super::common::SignalId {
        self.downLink.as_ref().unwrap_or_else(|| <super::common::SignalId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downLink(&mut self) {
        self.downLink.clear();
    }

    pub fn has_downLink(&self) -> bool {
        self.downLink.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downLink(&mut self, v: super::common::SignalId) {
        self.downLink = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downLink(&mut self) -> &mut super::common::SignalId {
        if self.downLink.is_none() {
            self.downLink.set_default();
        }
        self.downLink.as_mut().unwrap()
    }

    // Take field
    pub fn take_downLink(&mut self) -> super::common::SignalId {
        self.downLink.take().unwrap_or_else(|| super::common::SignalId::new())
    }

    // bytes serviceId = 3;


    pub fn get_serviceId(&self) -> &[u8] {
        &self.serviceId
    }
    pub fn clear_serviceId(&mut self) {
        self.serviceId.clear();
    }

    // Param is passed by value, moved
    pub fn set_serviceId(&mut self, v: ::std::vec::Vec<u8>) {
        self.serviceId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serviceId(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.serviceId
    }

    // Take field
    pub fn take_serviceId(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.serviceId, ::std::vec::Vec::new())
    }

    // bytes dataIdentifier = 4;


    pub fn get_dataIdentifier(&self) -> &[u8] {
        &self.dataIdentifier
    }
    pub fn clear_dataIdentifier(&mut self) {
        self.dataIdentifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataIdentifier(&mut self, v: ::std::vec::Vec<u8>) {
        self.dataIdentifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataIdentifier(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dataIdentifier
    }

    // Take field
    pub fn take_dataIdentifier(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dataIdentifier, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DiagnosticsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.upLink {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.downLink {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upLink)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downLink)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.serviceId)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dataIdentifier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.upLink.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.downLink.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.serviceId.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.serviceId);
        }
        if !self.dataIdentifier.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dataIdentifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.upLink.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.downLink.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.serviceId.is_empty() {
            os.write_bytes(3, &self.serviceId)?;
        }
        if !self.dataIdentifier.is_empty() {
            os.write_bytes(4, &self.dataIdentifier)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiagnosticsRequest {
        DiagnosticsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SignalId>>(
                "upLink",
                |m: &DiagnosticsRequest| { &m.upLink },
                |m: &mut DiagnosticsRequest| { &mut m.upLink },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SignalId>>(
                "downLink",
                |m: &DiagnosticsRequest| { &m.downLink },
                |m: &mut DiagnosticsRequest| { &mut m.downLink },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "serviceId",
                |m: &DiagnosticsRequest| { &m.serviceId },
                |m: &mut DiagnosticsRequest| { &mut m.serviceId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "dataIdentifier",
                |m: &DiagnosticsRequest| { &m.dataIdentifier },
                |m: &mut DiagnosticsRequest| { &mut m.dataIdentifier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiagnosticsRequest>(
                "DiagnosticsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiagnosticsRequest {
        static instance: ::protobuf::rt::LazyV2<DiagnosticsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiagnosticsRequest::new)
    }
}

impl ::protobuf::Clear for DiagnosticsRequest {
    fn clear(&mut self) {
        self.upLink.clear();
        self.downLink.clear();
        self.serviceId.clear();
        self.dataIdentifier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiagnosticsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiagnosticsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiagnosticsResponse {
    // message fields
    pub raw: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiagnosticsResponse {
    fn default() -> &'a DiagnosticsResponse {
        <DiagnosticsResponse as ::protobuf::Message>::default_instance()
    }
}

impl DiagnosticsResponse {
    pub fn new() -> DiagnosticsResponse {
        ::std::default::Default::default()
    }

    // bytes raw = 5;


    pub fn get_raw(&self) -> &[u8] {
        &self.raw
    }
    pub fn clear_raw(&mut self) {
        self.raw.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.raw
    }

    // Take field
    pub fn take_raw(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.raw, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DiagnosticsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.raw)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.raw.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.raw);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.raw.is_empty() {
            os.write_bytes(5, &self.raw)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiagnosticsResponse {
        DiagnosticsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "raw",
                |m: &DiagnosticsResponse| { &m.raw },
                |m: &mut DiagnosticsResponse| { &mut m.raw },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiagnosticsResponse>(
                "DiagnosticsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiagnosticsResponse {
        static instance: ::protobuf::rt::LazyV2<DiagnosticsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiagnosticsResponse::new)
    }
}

impl ::protobuf::Clear for DiagnosticsResponse {
    fn clear(&mut self) {
        self.raw.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiagnosticsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiagnosticsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15diagnostics_api.proto\x12\x04base\x1a\x0ccommon.proto\"\xae\x01\n\
    \x12DiagnosticsRequest\x12&\n\x06upLink\x18\x01\x20\x01(\x0b2\x0e.base.S\
    ignalIdR\x06upLink\x12*\n\x08downLink\x18\x02\x20\x01(\x0b2\x0e.base.Sig\
    nalIdR\x08downLink\x12\x1c\n\tserviceId\x18\x03\x20\x01(\x0cR\tserviceId\
    \x12&\n\x0edataIdentifier\x18\x04\x20\x01(\x0cR\x0edataIdentifier\"'\n\
    \x13DiagnosticsResponse\x12\x10\n\x03raw\x18\x05\x20\x01(\x0cR\x03raw2c\
    \n\x12DiagnosticsService\x12M\n\x14SendDiagnosticsQuery\x12\x18.base.Dia\
    gnosticsRequest\x1a\x19.base.DiagnosticsResponse\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
