// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `network_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct SubscriberConfig {
    // message fields
    pub clientId: ::protobuf::SingularPtrField<super::common::ClientId>,
    pub signals: ::protobuf::SingularPtrField<SignalIds>,
    pub onChange: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscriberConfig {
    fn default() -> &'a SubscriberConfig {
        <SubscriberConfig as ::protobuf::Message>::default_instance()
    }
}

impl SubscriberConfig {
    pub fn new() -> SubscriberConfig {
        ::std::default::Default::default()
    }

    // .base.ClientId clientId = 1;


    pub fn get_clientId(&self) -> &super::common::ClientId {
        self.clientId.as_ref().unwrap_or_else(|| <super::common::ClientId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: super::common::ClientId) {
        self.clientId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId(&mut self) -> &mut super::common::ClientId {
        if self.clientId.is_none() {
            self.clientId.set_default();
        }
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> super::common::ClientId {
        self.clientId.take().unwrap_or_else(|| super::common::ClientId::new())
    }

    // .base.SignalIds signals = 2;


    pub fn get_signals(&self) -> &SignalIds {
        self.signals.as_ref().unwrap_or_else(|| <SignalIds as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signals(&mut self) {
        self.signals.clear();
    }

    pub fn has_signals(&self) -> bool {
        self.signals.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signals(&mut self, v: SignalIds) {
        self.signals = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signals(&mut self) -> &mut SignalIds {
        if self.signals.is_none() {
            self.signals.set_default();
        }
        self.signals.as_mut().unwrap()
    }

    // Take field
    pub fn take_signals(&mut self) -> SignalIds {
        self.signals.take().unwrap_or_else(|| SignalIds::new())
    }

    // bool onChange = 3;


    pub fn get_onChange(&self) -> bool {
        self.onChange
    }
    pub fn clear_onChange(&mut self) {
        self.onChange = false;
    }

    // Param is passed by value, moved
    pub fn set_onChange(&mut self, v: bool) {
        self.onChange = v;
    }
}

impl ::protobuf::Message for SubscriberConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.clientId {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.clientId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signals)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.onChange = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.clientId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signals.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.onChange != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.clientId.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signals.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.onChange != false {
            os.write_bool(3, self.onChange)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscriberConfig {
        SubscriberConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::ClientId>>(
                "clientId",
                |m: &SubscriberConfig| { &m.clientId },
                |m: &mut SubscriberConfig| { &mut m.clientId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignalIds>>(
                "signals",
                |m: &SubscriberConfig| { &m.signals },
                |m: &mut SubscriberConfig| { &mut m.signals },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "onChange",
                |m: &SubscriberConfig| { &m.onChange },
                |m: &mut SubscriberConfig| { &mut m.onChange },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscriberConfig>(
                "SubscriberConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscriberConfig {
        static instance: ::protobuf::rt::LazyV2<SubscriberConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscriberConfig::new)
    }
}

impl ::protobuf::Clear for SubscriberConfig {
    fn clear(&mut self) {
        self.clientId.clear();
        self.signals.clear();
        self.onChange = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscriberConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriberConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignalIds {
    // message fields
    pub signalId: ::protobuf::RepeatedField<super::common::SignalId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignalIds {
    fn default() -> &'a SignalIds {
        <SignalIds as ::protobuf::Message>::default_instance()
    }
}

impl SignalIds {
    pub fn new() -> SignalIds {
        ::std::default::Default::default()
    }

    // repeated .base.SignalId signalId = 1;


    pub fn get_signalId(&self) -> &[super::common::SignalId] {
        &self.signalId
    }
    pub fn clear_signalId(&mut self) {
        self.signalId.clear();
    }

    // Param is passed by value, moved
    pub fn set_signalId(&mut self, v: ::protobuf::RepeatedField<super::common::SignalId>) {
        self.signalId = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signalId(&mut self) -> &mut ::protobuf::RepeatedField<super::common::SignalId> {
        &mut self.signalId
    }

    // Take field
    pub fn take_signalId(&mut self) -> ::protobuf::RepeatedField<super::common::SignalId> {
        ::std::mem::replace(&mut self.signalId, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SignalIds {
    fn is_initialized(&self) -> bool {
        for v in &self.signalId {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signalId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signalId {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signalId {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignalIds {
        SignalIds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SignalId>>(
                "signalId",
                |m: &SignalIds| { &m.signalId },
                |m: &mut SignalIds| { &mut m.signalId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignalIds>(
                "SignalIds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignalIds {
        static instance: ::protobuf::rt::LazyV2<SignalIds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignalIds::new)
    }
}

impl ::protobuf::Clear for SignalIds {
    fn clear(&mut self) {
        self.signalId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignalIds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignalIds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Signals {
    // message fields
    pub signal: ::protobuf::RepeatedField<Signal>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Signals {
    fn default() -> &'a Signals {
        <Signals as ::protobuf::Message>::default_instance()
    }
}

impl Signals {
    pub fn new() -> Signals {
        ::std::default::Default::default()
    }

    // repeated .base.Signal signal = 1;


    pub fn get_signal(&self) -> &[Signal] {
        &self.signal
    }
    pub fn clear_signal(&mut self) {
        self.signal.clear();
    }

    // Param is passed by value, moved
    pub fn set_signal(&mut self, v: ::protobuf::RepeatedField<Signal>) {
        self.signal = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signal(&mut self) -> &mut ::protobuf::RepeatedField<Signal> {
        &mut self.signal
    }

    // Take field
    pub fn take_signal(&mut self) -> ::protobuf::RepeatedField<Signal> {
        ::std::mem::replace(&mut self.signal, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Signals {
    fn is_initialized(&self) -> bool {
        for v in &self.signal {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signal)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signal {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signal {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Signals {
        Signals::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Signal>>(
                "signal",
                |m: &Signals| { &m.signal },
                |m: &mut Signals| { &mut m.signal },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Signals>(
                "Signals",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Signals {
        static instance: ::protobuf::rt::LazyV2<Signals> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Signals::new)
    }
}

impl ::protobuf::Clear for Signals {
    fn clear(&mut self) {
        self.signal.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Signals {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signals {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublisherConfig {
    // message fields
    pub signals: ::protobuf::SingularPtrField<Signals>,
    pub clientId: ::protobuf::SingularPtrField<super::common::ClientId>,
    pub frequency: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublisherConfig {
    fn default() -> &'a PublisherConfig {
        <PublisherConfig as ::protobuf::Message>::default_instance()
    }
}

impl PublisherConfig {
    pub fn new() -> PublisherConfig {
        ::std::default::Default::default()
    }

    // .base.Signals signals = 1;


    pub fn get_signals(&self) -> &Signals {
        self.signals.as_ref().unwrap_or_else(|| <Signals as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signals(&mut self) {
        self.signals.clear();
    }

    pub fn has_signals(&self) -> bool {
        self.signals.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signals(&mut self, v: Signals) {
        self.signals = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signals(&mut self) -> &mut Signals {
        if self.signals.is_none() {
            self.signals.set_default();
        }
        self.signals.as_mut().unwrap()
    }

    // Take field
    pub fn take_signals(&mut self) -> Signals {
        self.signals.take().unwrap_or_else(|| Signals::new())
    }

    // .base.ClientId clientId = 2;


    pub fn get_clientId(&self) -> &super::common::ClientId {
        self.clientId.as_ref().unwrap_or_else(|| <super::common::ClientId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: super::common::ClientId) {
        self.clientId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId(&mut self) -> &mut super::common::ClientId {
        if self.clientId.is_none() {
            self.clientId.set_default();
        }
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> super::common::ClientId {
        self.clientId.take().unwrap_or_else(|| super::common::ClientId::new())
    }

    // int32 frequency = 3;


    pub fn get_frequency(&self) -> i32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: i32) {
        self.frequency = v;
    }
}

impl ::protobuf::Message for PublisherConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.signals {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.clientId {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signals)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.clientId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.frequency = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signals.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.clientId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(3, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signals.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.clientId.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.frequency != 0 {
            os.write_int32(3, self.frequency)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublisherConfig {
        PublisherConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Signals>>(
                "signals",
                |m: &PublisherConfig| { &m.signals },
                |m: &mut PublisherConfig| { &mut m.signals },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::ClientId>>(
                "clientId",
                |m: &PublisherConfig| { &m.clientId },
                |m: &mut PublisherConfig| { &mut m.clientId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "frequency",
                |m: &PublisherConfig| { &m.frequency },
                |m: &mut PublisherConfig| { &mut m.frequency },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PublisherConfig>(
                "PublisherConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PublisherConfig {
        static instance: ::protobuf::rt::LazyV2<PublisherConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PublisherConfig::new)
    }
}

impl ::protobuf::Clear for PublisherConfig {
    fn clear(&mut self) {
        self.signals.clear();
        self.clientId.clear();
        self.frequency = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublisherConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublisherConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Signal {
    // message fields
    pub id: ::protobuf::SingularPtrField<super::common::SignalId>,
    pub raw: ::std::vec::Vec<u8>,
    pub timestamp: i64,
    // message oneof groups
    pub payload: ::std::option::Option<Signal_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Signal {
    fn default() -> &'a Signal {
        <Signal as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Signal_oneof_payload {
    integer(i64),
    double(f64),
    arbitration(bool),
    empty(bool),
}

impl Signal {
    pub fn new() -> Signal {
        ::std::default::Default::default()
    }

    // .base.SignalId id = 1;


    pub fn get_id(&self) -> &super::common::SignalId {
        self.id.as_ref().unwrap_or_else(|| <super::common::SignalId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: super::common::SignalId) {
        self.id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut super::common::SignalId {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> super::common::SignalId {
        self.id.take().unwrap_or_else(|| super::common::SignalId::new())
    }

    // int64 integer = 2;


    pub fn get_integer(&self) -> i64 {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::integer(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_integer(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_integer(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::integer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer(&mut self, v: i64) {
        self.payload = ::std::option::Option::Some(Signal_oneof_payload::integer(v))
    }

    // double double = 3;


    pub fn get_double(&self) -> f64 {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::double(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_double(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::double(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double(&mut self, v: f64) {
        self.payload = ::std::option::Option::Some(Signal_oneof_payload::double(v))
    }

    // bool arbitration = 4;


    pub fn get_arbitration(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::arbitration(v)) => v,
            _ => false,
        }
    }
    pub fn clear_arbitration(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_arbitration(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::arbitration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_arbitration(&mut self, v: bool) {
        self.payload = ::std::option::Option::Some(Signal_oneof_payload::arbitration(v))
    }

    // bool empty = 6;


    pub fn get_empty(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::empty(v)) => v,
            _ => false,
        }
    }
    pub fn clear_empty(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_empty(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Signal_oneof_payload::empty(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty(&mut self, v: bool) {
        self.payload = ::std::option::Option::Some(Signal_oneof_payload::empty(v))
    }

    // bytes raw = 5;


    pub fn get_raw(&self) -> &[u8] {
        &self.raw
    }
    pub fn clear_raw(&mut self) {
        self.raw.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.raw
    }

    // Take field
    pub fn take_raw(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.raw, ::std::vec::Vec::new())
    }

    // int64 timestamp = 7;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for Signal {
    fn is_initialized(&self) -> bool {
        for v in &self.id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Signal_oneof_payload::integer(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Signal_oneof_payload::double(is.read_double()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Signal_oneof_payload::arbitration(is.read_bool()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Signal_oneof_payload::empty(is.read_bool()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.raw)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.raw.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.raw);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &Signal_oneof_payload::integer(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Signal_oneof_payload::double(v) => {
                    my_size += 9;
                },
                &Signal_oneof_payload::arbitration(v) => {
                    my_size += 2;
                },
                &Signal_oneof_payload::empty(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.raw.is_empty() {
            os.write_bytes(5, &self.raw)?;
        }
        if self.timestamp != 0 {
            os.write_int64(7, self.timestamp)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &Signal_oneof_payload::integer(v) => {
                    os.write_int64(2, v)?;
                },
                &Signal_oneof_payload::double(v) => {
                    os.write_double(3, v)?;
                },
                &Signal_oneof_payload::arbitration(v) => {
                    os.write_bool(4, v)?;
                },
                &Signal_oneof_payload::empty(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Signal {
        Signal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SignalId>>(
                "id",
                |m: &Signal| { &m.id },
                |m: &mut Signal| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "integer",
                Signal::has_integer,
                Signal::get_integer,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "double",
                Signal::has_double,
                Signal::get_double,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "arbitration",
                Signal::has_arbitration,
                Signal::get_arbitration,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "empty",
                Signal::has_empty,
                Signal::get_empty,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "raw",
                |m: &Signal| { &m.raw },
                |m: &mut Signal| { &mut m.raw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Signal| { &m.timestamp },
                |m: &mut Signal| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Signal>(
                "Signal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Signal {
        static instance: ::protobuf::rt::LazyV2<Signal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Signal::new)
    }
}

impl ::protobuf::Clear for Signal {
    fn clear(&mut self) {
        self.id.clear();
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.raw.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Signal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11network_api.proto\x12\x04base\x1a\x0ccommon.proto\"\x85\x01\n\x10S\
    ubscriberConfig\x12*\n\x08clientId\x18\x01\x20\x01(\x0b2\x0e.base.Client\
    IdR\x08clientId\x12)\n\x07signals\x18\x02\x20\x01(\x0b2\x0f.base.SignalI\
    dsR\x07signals\x12\x1a\n\x08onChange\x18\x03\x20\x01(\x08R\x08onChange\"\
    7\n\tSignalIds\x12*\n\x08signalId\x18\x01\x20\x03(\x0b2\x0e.base.SignalI\
    dR\x08signalId\"/\n\x07Signals\x12$\n\x06signal\x18\x01\x20\x03(\x0b2\
    \x0c.base.SignalR\x06signal\"\x84\x01\n\x0fPublisherConfig\x12'\n\x07sig\
    nals\x18\x01\x20\x01(\x0b2\r.base.SignalsR\x07signals\x12*\n\x08clientId\
    \x18\x02\x20\x01(\x0b2\x0e.base.ClientIdR\x08clientId\x12\x1c\n\tfrequen\
    cy\x18\x03\x20\x01(\x05R\tfrequency\"\xd5\x01\n\x06Signal\x12\x1e\n\x02i\
    d\x18\x01\x20\x01(\x0b2\x0e.base.SignalIdR\x02id\x12\x1a\n\x07integer\
    \x18\x02\x20\x01(\x03H\0R\x07integer\x12\x18\n\x06double\x18\x03\x20\x01\
    (\x01H\0R\x06double\x12\"\n\x0barbitration\x18\x04\x20\x01(\x08H\0R\x0ba\
    rbitration\x12\x16\n\x05empty\x18\x06\x20\x01(\x08H\0R\x05empty\x12\x10\
    \n\x03raw\x18\x05\x20\x01(\x0cR\x03raw\x12\x1c\n\ttimestamp\x18\x07\x20\
    \x01(\x03R\ttimestampB\t\n\x07payload2\xba\x01\n\x0eNetworkService\x12?\
    \n\x12SubscribeToSignals\x12\x16.base.SubscriberConfig\x1a\r.base.Signal\
    s\"\00\x01\x126\n\x0ePublishSignals\x12\x15.base.PublisherConfig\x1a\x0b\
    .base.Empty\"\0\x12/\n\x0bReadSignals\x12\x0f.base.SignalIds\x1a\r.base.\
    Signals\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
